(function () {
    'use strict';

    //Inspired from https://github.com/d3/d3-hexbin/blob/master/src/hexbin.js
    function Binner(){
        var thirdPi = Math.PI/3,
        angles = [0, thirdPi, 2*thirdPi, 3*thirdPi, 4*thirdPi, 5*thirdPi];

        function pointX(d){
            return d[0];
        }
        function pointY(d){
            return d[1];
        }
        var x0 = 0,
            y0 = 0,
            x1 = 1,
            y1 = 1,
            x = pointX,
            y = pointY,
            r,
            dx,
            dy;

        function hexbin(points){
            var binsById = {}, bins = [], i, n = points.length;

            for (i = 0; i < n; ++i) {
                if (isNaN(px = +x.call(null, point = points[i], i, points))
                    || isNaN(py = +y.call(null, point, i, points))) continue;

                var point,
                    px,
                    py,
                    pj = Math.round(py = py / dy),
                    pi = Math.round(px = px / dx - (pj & 1) / 2),
                    py1 = py - pj;

                if (Math.abs(py1) * 3 > 1) {
                    var px1 = px - pi,
                        pi2 = pi + (px < pi ? -1 : 1) / 2,
                        pj2 = pj + (py < pj ? -1 : 1),
                        px2 = px - pi2,
                        py2 = py - pj2;
                    if (px1 * px1 + py1 * py1 > px2 * px2 + py2 * py2) pi = pi2 + (pj & 1 ? 1 : -1) / 2, pj = pj2;
                }

                var id = pi + "-" + pj, bin = binsById[id];
                if (bin) bin.push(point);
                else {
                    bins.push(bin = binsById[id] = [point]);
                    bin.x = (pi + (pj & 1) / 2) * dx;
                    bin.y = pj * dy;
                }
            }

            return bins;
        }
        function hexagon(radius){
            var x0 = 0, y0 = 0;
            return angles.map(function(angle) {
                var x1 = Math.sin(angle) * radius,
                    y1 = -Math.cos(angle) * radius,
                    dx = x1 - x0,
                    dy = y1 - y0;
                x0 = x1, y0 = y1;
                return [dx, dy];
            });
        }

        //Export it
        this.hexbin = hexbin;
        this.hexagon = function(radius){
            return "m" + hexagon(radius == null ? r : +radius).join("l") + "z";
        };
        this.centers = function(){
            var centers = [],
                j = Math.round(y0 / dy),
                i = Math.round(x0 / dx);
            for (var y = j * dy; y < y1 + r; y += dy, ++j) {
                for (var x = i * dx + (j & 1) * dx / 2; x < x1 + dx / 2; x += dx) {
                    centers.push([x, y]);
                }
            }
            return centers;
        };
        this.mesh = function(){
            var fragment = hexagon(r).slice(0, 4).join("l");
            return hexbin.centers().map(function(p) { return "M" + p + "m" + fragment; }).join("");
        };
        //Setters/getters
        this.x = function(_){
            return arguments.length ? (x = _, this) : x;
        };
        this.y = function(_){
            return arguments.length ? (y = _, this) : y;
        };
        this.radius = function(_){
            return arguments.length ? (r= +_, dx = r * 2 * Math.sin(thirdPi), dy = r*1.5, this): r;
        };
        this.size = function(_) {
            return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], this) : [x1 - x0, y1 - y0];
        };
        this.extent = function(_){
            return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], this): [[x0, y0], [x1, y1]];
        };

        return this.radius(1);
    }

    //from: https://github.com/mapbox/delaunator/blob/master/index.js
    class Delaunator {

        static from(points, getX, getY) {
            if (!getX) getX = defaultGetX;
            if (!getY) getY = defaultGetY;

            const n = points.length;
            const coords = new Float64Array(n * 2);

            for (let i = 0; i < n; i++) {
                const p = points[i];
                coords[2 * i] = getX(p);
                coords[2 * i + 1] = getY(p);
            }

            return new Delaunator(coords);
        }

        constructor(coords) {
            let minX = Infinity;
            let minY = Infinity;
            let maxX = -Infinity;
            let maxY = -Infinity;

            const n = coords.length >> 1;
            const ids = this.ids = new Uint32Array(n);

            if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');

            this.coords = coords;

            for (let i = 0; i < n; i++) {
                const x = coords[2 * i];
                const y = coords[2 * i + 1];
                if (x < minX) minX = x;
                if (y < minY) minY = y;
                if (x > maxX) maxX = x;
                if (y > maxY) maxY = y;
                ids[i] = i;
            }

            const cx = (minX + maxX) / 2;
            const cy = (minY + maxY) / 2;

            let minDist = Infinity;
            let i0, i1, i2;

            // pick a seed point close to the centroid
            for (let i = 0; i < n; i++) {
                const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);
                if (d < minDist) {
                    i0 = i;
                    minDist = d;
                }
            }

            minDist = Infinity;

            // find the point closest to the seed
            for (let i = 0; i < n; i++) {
                if (i === i0) continue;
                const d = dist(coords[2 * i0], coords[2 * i0 + 1], coords[2 * i], coords[2 * i + 1]);
                if (d < minDist && d > 0) {
                    i1 = i;
                    minDist = d;
                }
            }

            let minRadius = Infinity;

            // find the third point which forms the smallest circumcircle with the first two
            for (let i = 0; i < n; i++) {
                if (i === i0 || i === i1) continue;

                const r = circumradius(
                    coords[2 * i0], coords[2 * i0 + 1],
                    coords[2 * i1], coords[2 * i1 + 1],
                    coords[2 * i], coords[2 * i + 1]);

                if (r < minRadius) {
                    i2 = i;
                    minRadius = r;
                }
            }

            if (minRadius === Infinity) {
                throw new Error('No Delaunay triangulation exists for this input.');
            }

            // swap the order of the seed points for counter-clockwise orientation
            if (area(coords[2 * i0], coords[2 * i0 + 1],
                coords[2 * i1], coords[2 * i1 + 1],
                coords[2 * i2], coords[2 * i2 + 1]) < 0) {

                const tmp = i1;
                i1 = i2;
                i2 = tmp;
            }

            const i0x = coords[2 * i0];
            const i0y = coords[2 * i0 + 1];
            const i1x = coords[2 * i1];
            const i1y = coords[2 * i1 + 1];
            const i2x = coords[2 * i2];
            const i2y = coords[2 * i2 + 1];

            const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);
            this._cx = center.x;
            this._cy = center.y;

            // sort the points by distance from the seed triangle circumcenter
            quicksort(ids, coords, 0, ids.length - 1, center.x, center.y);

            // initialize a hash table for storing edges of the advancing convex hull
            this._hashSize = Math.ceil(Math.sqrt(n));
            this._hash = [];
            for (let i = 0; i < this._hashSize; i++) this._hash[i] = null;

            // initialize a circular doubly-linked list that will hold an advancing convex hull
            let e = this.hull = insertNode(coords, i0);
            this._hashEdge(e);
            e.t = 0;
            e = insertNode(coords, i1, e);
            this._hashEdge(e);
            e.t = 1;
            e = insertNode(coords, i2, e);
            this._hashEdge(e);
            e.t = 2;

            const maxTriangles = 2 * n - 5;
            const triangles = this.triangles = new Uint32Array(maxTriangles * 3);
            const halfedges = this.halfedges = new Int32Array(maxTriangles * 3);

            this.trianglesLen = 0;

            this._addTriangle(i0, i1, i2, -1, -1, -1);

            for (let k = 0, xp, yp; k < ids.length; k++) {
                const i = ids[k];
                const x = coords[2 * i];
                const y = coords[2 * i + 1];

                // skip duplicate points
                if (x === xp && y === yp) continue;
                xp = x;
                yp = y;

                // skip seed triangle points
                if ((x === i0x && y === i0y) ||
                    (x === i1x && y === i1y) ||
                    (x === i2x && y === i2y)) continue;

                // find a visible edge on the convex hull using edge hash
                const startKey = this._hashKey(x, y);
                let key = startKey;
                let start;
                do {
                    start = this._hash[key];
                    key = (key + 1) % this._hashSize;
                } while ((!start || start.removed) && key !== startKey);

                e = start;
                while (area(x, y, e.x, e.y, e.next.x, e.next.y) >= 0) {
                    e = e.next;
                    if (e === start) {
                        throw new Error('Something is wrong with the input points.');
                    }
                }

                const walkBack = e === start;

                // add the first triangle from the point
                let t = this._addTriangle(e.i, i, e.next.i, -1, -1, e.t);

                e.t = t; // keep track of boundary triangles on the hull
                e = insertNode(coords, i, e);

                // recursively flip triangles from the point until they satisfy the Delaunay condition
                e.t = this._legalize(t + 2);
                if (e.prev.prev.t === halfedges[t + 1]) {
                    e.prev.prev.t = t + 2;
                }

                // walk forward through the hull, adding more triangles and flipping recursively
                let q = e.next;
                while (area(x, y, q.x, q.y, q.next.x, q.next.y) < 0) {
                    t = this._addTriangle(q.i, i, q.next.i, q.prev.t, -1, q.t);
                    q.prev.t = this._legalize(t + 2);
                    this.hull = removeNode(q);
                    q = q.next;
                }

                if (walkBack) {
                    // walk backward from the other side, adding more triangles and flipping
                    q = e.prev;
                    while (area(x, y, q.prev.x, q.prev.y, q.x, q.y) < 0) {
                        t = this._addTriangle(q.prev.i, i, q.i, -1, q.t, q.prev.t);
                        this._legalize(t + 2);
                        q.prev.t = t;
                        this.hull = removeNode(q);
                        q = q.prev;
                    }
                }

                // save the two new edges in the hash table
                this._hashEdge(e);
                this._hashEdge(e.prev);
            }

            // trim typed triangle mesh arrays
            this.triangles = triangles.subarray(0, this.trianglesLen);
            this.halfedges = halfedges.subarray(0, this.trianglesLen);
        }

        _hashEdge(e) {
            this._hash[this._hashKey(e.x, e.y)] = e;
        }

        _hashKey(x, y) {
            const dx = x - this._cx;
            const dy = y - this._cy;
            // use pseudo-angle: a measure that monotonically increases
            // with real angle, but doesn't require expensive trigonometry
            const p = 1 - dx / (Math.abs(dx) + Math.abs(dy));
            return Math.floor((2 + (dy < 0 ? -p : p)) / 4 * this._hashSize);
        }

        _legalize(a) {
            const {triangles, coords, halfedges} = this;

            const b = halfedges[a];

            const a0 = a - a % 3;
            const b0 = b - b % 3;

            const al = a0 + (a + 1) % 3;
            const ar = a0 + (a + 2) % 3;
            const bl = b0 + (b + 2) % 3;

            const p0 = triangles[ar];
            const pr = triangles[a];
            const pl = triangles[al];
            const p1 = triangles[bl];

            const illegal = inCircle(
                coords[2 * p0], coords[2 * p0 + 1],
                coords[2 * pr], coords[2 * pr + 1],
                coords[2 * pl], coords[2 * pl + 1],
                coords[2 * p1], coords[2 * p1 + 1]);

            if (illegal) {
                triangles[a] = p1;
                triangles[b] = p0;

                this._link(a, halfedges[bl]);
                this._link(b, halfedges[ar]);
                this._link(ar, bl);

                const br = b0 + (b + 1) % 3;

                this._legalize(a);
                return this._legalize(br);
            }

            return ar;
        }

        _link(a, b) {
            this.halfedges[a] = b;
            if (b !== -1) this.halfedges[b] = a;
        }

        // add a new triangle given vertex indices and adjacent half-edge ids
        _addTriangle(i0, i1, i2, a, b, c) {
            const t = this.trianglesLen;

            this.triangles[t] = i0;
            this.triangles[t + 1] = i1;
            this.triangles[t + 2] = i2;

            this._link(t, a);
            this._link(t + 1, b);
            this._link(t + 2, c);

            this.trianglesLen += 3;

            return t;
        }
    }

    function dist(ax, ay, bx, by) {
        const dx = ax - bx;
        const dy = ay - by;
        return dx * dx + dy * dy;
    }

    function area(px, py, qx, qy, rx, ry) {
        return (qy - py) * (rx - qx) - (qx - px) * (ry - qy);
    }

    function inCircle(ax, ay, bx, by, cx, cy, px, py) {
        const dx = ax - px;
        const dy = ay - py;
        const ex = bx - px;
        const ey = by - py;
        const fx = cx - px;
        const fy = cy - py;

        const ap = dx * dx + dy * dy;
        const bp = ex * ex + ey * ey;
        const cp = fx * fx + fy * fy;

        return dx * (ey * cp - bp * fy) -
               dy * (ex * cp - bp * fx) +
               ap * (ex * fy - ey * fx) < 0;
    }

    function circumradius(ax, ay, bx, by, cx, cy) {
        const dx = bx - ax;
        const dy = by - ay;
        const ex = cx - ax;
        const ey = cy - ay;

        const bl = dx * dx + dy * dy;
        const cl = ex * ex + ey * ey;
        const d = dx * ey - dy * ex;

        const x = (ey * bl - dy * cl) * 0.5 / d;
        const y = (dx * cl - ex * bl) * 0.5 / d;

        return bl && cl && d && (x * x + y * y) || Infinity;
    }

    function circumcenter(ax, ay, bx, by, cx, cy) {
        const dx = bx - ax;
        const dy = by - ay;
        const ex = cx - ax;
        const ey = cy - ay;

        const bl = dx * dx + dy * dy;
        const cl = ex * ex + ey * ey;
        const d = dx * ey - dy * ex;

        const x = ax + (ey * bl - dy * cl) * 0.5 / d;
        const y = ay + (dx * cl - ex * bl) * 0.5 / d;

        return {x, y};
    }

    // create a new node in a doubly linked list
    function insertNode(coords, i, prev) {
        const node = {
            i: i,
            x: coords[2 * i],
            y: coords[2 * i + 1],
            t: 0,
            prev: null,
            next: null,
            removed: false
        };

        if (!prev) {
            node.prev = node;
            node.next = node;

        } else {
            node.next = prev.next;
            node.prev = prev;
            prev.next.prev = node;
            prev.next = node;
        }
        return node;
    }

    function removeNode(node) {
        node.prev.next = node.next;
        node.next.prev = node.prev;
        node.removed = true;
        return node.prev;
    }

    function quicksort(ids, coords, left, right, cx, cy) {
        let i, j, temp;

        if (right - left <= 20) {
            for (i = left + 1; i <= right; i++) {
                temp = ids[i];
                j = i - 1;
                while (j >= left && compare(coords, ids[j], temp, cx, cy) > 0) ids[j + 1] = ids[j--];
                ids[j + 1] = temp;
            }
        } else {
            const median = (left + right) >> 1;
            i = left + 1;
            j = right;
            swap(ids, median, i);
            if (compare(coords, ids[left], ids[right], cx, cy) > 0) swap(ids, left, right);
            if (compare(coords, ids[i], ids[right], cx, cy) > 0) swap(ids, i, right);
            if (compare(coords, ids[left], ids[i], cx, cy) > 0) swap(ids, left, i);

            temp = ids[i];
            while (true) {
                do i++; while (compare(coords, ids[i], temp, cx, cy) < 0);
                do j--; while (compare(coords, ids[j], temp, cx, cy) > 0);
                if (j < i) break;
                swap(ids, i, j);
            }
            ids[left + 1] = ids[j];
            ids[j] = temp;

            if (right - i + 1 >= j - left) {
                quicksort(ids, coords, i, right, cx, cy);
                quicksort(ids, coords, left, j - 1, cx, cy);
            } else {
                quicksort(ids, coords, left, j - 1, cx, cy);
                quicksort(ids, coords, i, right, cx, cy);
            }
        }
    }

    function compare(coords, i, j, cx, cy) {
        const d1 = dist(coords[2 * i], coords[2 * i + 1], cx, cy);
        const d2 = dist(coords[2 * j], coords[2 * j + 1], cx, cy);
        return (d1 - d2) || (coords[2 * i] - coords[2 * j]) || (coords[2 * i + 1] - coords[2 * j + 1]);
    }

    function swap(arr, i, j) {
        const tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    function defaultGetX(p) {
        return p[0];
    }
    function defaultGetY(p) {
        return p[1];
    }

    // https://gist.github.com/bmershon/25a74f7b1c7cbd07e7456af1d2c07da1
    // See https://en.wikipedia.org/wiki/Kruskal%27s_algorithm\
    // Depends on DisjointSet.

    /**
     * Create a graph from mesh
     * @param triangles is inform of set of triangles as the result from delaunay triangulations
     */
    function createGraph (triangles) {
        function makeNode(id) {
            return {"id": id};
        }

        function makeLink(sourceId, targetId, weight) {
            return {"source": sourceId, "target": targetId, "weight": weight};
        }

        let graph = {};
        graph.nodes = [];
        graph.links = [];
        //Creating nodes
        triangles.forEach(t => {
            for (let i = 0; i < 3; i++) {
                let id = t[i];
                if (!idExists(graph.nodes, id)) {
                    graph.nodes.push(makeNode(id));
                }
            }
        });

        function equalIds(id1, id2) {
            if (id1[0] === id2[0] && id1[1] === id2[1]) {
                return true;
            } else {
                return false;
            }
        }

        function idExists(nodes, id) {
            for (let i = 0; i < nodes.length; i++) {
                let node = nodes[i];
                if (equalIds(node.id, id)) {
                    return true;
                }
            }
            return false;
        }

        //Creating links
        triangles.forEach(t => {
            for (let i = 0; i < 3; i++) {
                let p1 = t[i];
                let p2 = t[(i + 1) % 3];
                let id1 = p1;
                let id2 = p2;
                let dist = distance(p1, p2);
                let link = makeLink(id1, id2, dist);
                if (!linkExists(graph.links, link)) {
                    graph.links.push(link);
                }
            }
        });

        function distance(a, b) {
            var dx = a[0] - b[0],
                dy = a[1] - b[1];
            //For computer storage issue, some coordinates of the same distance may return different distances if we use long floating point
            //So take only 10 digits after the floating points=> this is precise enough and still have the same values for two different lines of the same distance
            return Math.round(Math.sqrt((dx * dx) + (dy * dy))*Math.pow(10, 10))/Math.pow(10, 10);
        }

        //TODO: may sort the id alphabetically => when creating => so we can just check 1 condition only.
        function linkExists(links, link) {
            for (let i = 0; i < links.length; i++) {
                if ((equalIds(link.source, links[i].source) && equalIds(link.target, links[i].target)) ||
                    (equalIds(link.source, links[i].target) && equalIds(link.target, links[i].source))) {
                    return true;
                }
            }
            return false;
        }

        return graph;
    }


    /**
     * create the mst
     * @param graph: in form of nodes and links
     * @returns {{nodes: (selection_nodes|nodes), links: Array}}
     */
    function mst (graph) {
        let vertices = graph.nodes,
            edges = graph.links.slice(0),
            selectedEdges = [],
            forest = new DisjointSet();

        // Each vertex begins "disconnected" and isolated from all the others.
        vertices.forEach((vertex) => {
            forest.makeSet(vertex.id);
        });

        // Sort edges in descending order of weight. We will pop edges beginning
        // from the end of the array.
        edges.sort((a, b) => {
            return -(a.weight - b.weight);
        });

        while (edges.length && forest.size() > 1) {
            let edge = edges.pop();

            if (forest.find(edge.source) !== forest.find(edge.target)) {
                forest.union(edge.source, edge.target);
                selectedEdges.push(edge);
            }
        }

        return {
            nodes: vertices,
            links: selectedEdges
        }
    }


    function DisjointSet() {
        this.index_ = {};
    }

    function Node(id) {
        this.id_ = id;
        this.parent_ = this;
        this.rank_ = 0;
    }

    DisjointSet.prototype.makeSet = function (id) {
        if (!this.index_[id]) {
            let created = new Node(id);
            this.index_[id] = created;
        }
    };

    // Returns the id of the representative element of this set that (id)
    // belongs to.
    DisjointSet.prototype.find = function (id) {
        if (this.index_[id] === undefined) {
            return undefined;
        }

        let current = this.index_[id].parent_;
        while (current !== current.parent_) {
            current = current.parent_;
        }
        return current.id_;
    };

    DisjointSet.prototype.union = function (x, y) {
        let xRoot = this.index_[this.find(x)];
        let yRoot = this.index_[this.find(y)];

        if (xRoot === undefined || yRoot === undefined || xRoot === yRoot) {
            // x and y already belong to the same set.
            return;
        }

        if (xRoot.rank < yRoot.rank) { // Move x into the set y is a member of.
            xRoot.parent_ = yRoot;
        } else if (yRoot.rank_ < xRoot.rank_) { // Move y into the set x is a member of.
            yRoot.parent_ = xRoot;
        } else { // Arbitrarily choose to move y into the set x is a member of.
            yRoot.parent_ = xRoot;
            xRoot.rank_++;
        }
    };

    // Returns the current number of disjoint sets.
    DisjointSet.prototype.size = function () {
        let uniqueIndices = {};

        Object.keys(this.index_).forEach((id) => {
            let representative = this.find(id);

            uniqueIndices[id] = true;
        });

        return Object.keys(uniqueIndices).length;
    };

    class ConcaveHull{
        constructor(distance){
            if(!distance){
                this.calculateDistance = this.stdevDistance;
            }
            else if(typeof distance === "function"){
                this.calculateDistance = distance;
            }else if(typeof distance === "number"){
                this.calculateDistance = function () {return distance;};
            }
            this.padding = 0;
        }
        /**
         * generate the concave hull.
         * @param delaunay is inform of coordinates of triangulated triangles (3 pairs per triangle)
         * @returns {Array}
         */
        concaveHull(delaunay) {

            let longEdge = this.calculateDistance(delaunay);

            let mesh = delaunay.filter(function (d) {
                return distance(d[0], d[1]) < longEdge && distance(d[0], d[2]) < longEdge && distance(d[1], d[2]) < longEdge
            });

            var counts = {},
                edges = {},
                r,
                result = [];
            // Traverse the edges of all triangles and discard any edges that appear twice.
            mesh.forEach(function (triangle) {
                for (var i = 0; i < 3; i++) {
                    var edge = [triangle[i], triangle[(i + 1) % 3]].sort(ascendingCoords).map(String);
                    (edges[edge[0]] = (edges[edge[0]] || [])).push(edge[1]);
                    (edges[edge[1]] = (edges[edge[1]] || [])).push(edge[0]);
                    var k = edge.join(":");
                    if (counts[k]) delete counts[k];
                    else counts[k] = 1;
                }
            });

            while (1) {
                var k = null;
                // Pick an arbitrary starting point on a boundary.
                for (k in counts) break;
                if (k == null) break;
                result.push(r = k.split(":").map(function (d) {
                    return d.split(",").map(Number);
                }));
                delete counts[k];
                var q = r[1];
                while (q[0] !== r[0][0] || q[1] !== r[0][1]) {
                    var p = q,
                        qs = edges[p.join(",")],
                        n = qs.length;
                    for (var i = 0; i < n; i++) {
                        q = qs[i].split(",").map(Number);
                        var edge = [p, q].sort(ascendingCoords).join(":");
                        if (counts[edge]) {
                            delete counts[edge];
                            r.push(q);
                            break;
                        }
                    }
                }
            }

            if (this.padding !== 0) {
                result = pad(result, this.padding);
            }

            return result;

            function distance(a, b) {
                var dx = a[0] - b[0],
                    dy = a[1] - b[1];
                return Math.sqrt((dx * dx) + (dy * dy));
            }

            function pad(bounds, amount) {
                var result = [];
                bounds.forEach(function (bound) {
                    var padded = [];

                    var area = 0;
                    bound.forEach(function (p, i) {
                        // http://forums.esri.com/Thread.asp?c=2&f=1718&t=174277
                        // Area = Area + (X2 - X1) * (Y2 + Y1) / 2

                        var im1 = i - 1;
                        if (i == 0) {
                            im1 = bound.length - 1;
                        }
                        var pm = bound[im1];
                        area += (p[0] - pm[0]) * (p[1] + pm[1]) / 2;
                    });
                    var handedness = 1;
                    if (area > 0) handedness = -1;
                    bound.forEach(function (p, i) {
                        // average the tangent between
                        var im1 = i - 1;
                        if (i == 0) {
                            im1 = bound.length - 2;
                        }
                        //var tp = getTangent(p, bound[ip1]);
                        var tm = getTangent(p, bound[im1]);
                        //var avg = { x: (tp.x + tm.x)/2, y: (tp.y + tm.y)/2 };
                        //var normal = rotate2d(avg, 90);
                        var normal = rotate2d(tm, 90 * handedness);
                        padded.push([p[0] + normal.x * amount, p[1] + normal.y * amount]);
                    });
                    result.push(padded);
                });
                return result
            }

            function getTangent(a, b) {
                var vector = {x: b[0] - a[0], y: b[1] - a[1]};
                var magnitude = Math.sqrt(vector.x * vector.x + vector.y * vector.y);
                vector.x /= magnitude;
                vector.y /= magnitude;
                return vector
            }

            function rotate2d(vector, angle) {
                //rotate a vector
                angle *= Math.PI / 180; //convert to radians
                return {
                    x: vector.x * Math.cos(angle) - vector.y * Math.sin(angle),
                    y: vector.x * Math.sin(angle) + vector.y * Math.cos(angle)
                }
            }

            function ascendingCoords(a, b) {
                return a[0] === b[0] ? b[1] - a[1] : b[0] - a[0];
            }
        }
        stdevDistance(delaunay) {
            var sides = [];
            delaunay.forEach(function (d) {
                sides.push(distance(d[0], d[1]));
                sides.push(distance(d[0], d[2]));
                sides.push(distance(d[1], d[2]));
            });

            var dev = d3.deviation(sides);
            var mean = d3.mean(sides);

            return mean + dev;
        }
    }

    const statistics = {
        firstQuartile: function (values) {
            let theValues, q1;
            theValues = values.slice(0).sort((a, b) => a - b);
            if ((theValues.length / 4) % 1 === 0) {//find quartiles
                q1 = 1 / 2 * (theValues[(theValues.length / 4)] + theValues[(theValues.length / 4) + 1]);
            } else {
                q1 = theValues[Math.floor(theValues.length / 4 + 1)];
            }
            return q1;
        },
        thirdQuartile: function (values) {
            let theValues, q3;
            theValues = values.slice(0).sort((a, b) => a - b);
            if ((theValues.length / 4) % 1 === 0) {//find quartiles
                q3 = 1 / 2 * (theValues[(theValues.length * (3 / 4))] + theValues[(theValues.length * (3 / 4)) + 1]);
            } else {
                q3 = theValues[Math.ceil(theValues.length * (3 / 4) + 1)];
            }
            return q3;
        },
        normalBound: function (values) {
            let q1 = this.firstQuartile(values),
                q3 = this.thirdQuartile(values),
                iqr = q3 - q1,
                maxValue = q3 + iqr * 1.5,
                minValue = q1 - iqr * 1.5;

            return [minValue, maxValue];
        }
    };

    class Outlying{
        constructor(tree){
            this.tree = tree;
        }

        /**
         * Returns outlying score
         * @returns {number}
         */
        score(){
            let tree = this.tree;
            let totalLengths = 0;
            let totalOutlyingLengths = 0;
            let upperBound = statistics.normalBound(tree.links.map(l=>l.weight))[1];
            tree.links.forEach(l=>{
                totalLengths += l.weight;
                if(l.weight>upperBound){
                    totalOutlyingLengths += l.weight;
                    l.isOutlying = true;
                }
            });
            return totalOutlyingLengths/totalLengths;
        }

        /**
         * Returns outlying links
         */
        links(){
            return this.tree.links.filter(l=>l.isOutlying);
        }

        /**
         * Remove outlying links and nodes
         */
        removeOutlying(){
            // //Remove the links.
            // this.links().forEach(outlyingLink =>{
            //     this.tree.links.splice(this.tree.links.indexOf(outlyingLink), 1);
            // });

        }
    }

    (function(window){
        /**
         * initialize a scagnostic object
         * @param points
         * @param width
         * @param height
         * @param binningRadius
         * @returns {*[][]}
         */
        window.scagnostics = function(points, width, height, binningRadius) {
            /******This section is about the binner and binning results******/
            let binner = new Binner().radius(binningRadius).extent([[0, 0], [width, height]]);
            //Calculation
            let bins = binner.hexbin(points);
            let sites = bins.map(d => [d.x, d.y]); //=>sites are the set of centers of all bins
            //Assigning output results
            outputValue("binner", binner);
            outputValue("bins", bins);
            outputValue("binnedSites", sites);

            /******This section is about the triangulating and triangulating results******/
            //Triangulation calculation
            let delaunay = Delaunator.from(sites);
            let triangles = delaunay.triangles;
            let triangleCoordinates = [];
            for (let i = 0; i < triangles.length; i += 3) {
                triangleCoordinates.push([
                    sites[triangles[i]],
                    sites[triangles[i + 1]],
                    sites[triangles[i + 2]]
                ]);
            }
            //Assigning output values
            outputValue("delaunay", delaunay);
            outputValue("triangles", triangles);
            window.scagnostics.triangleCoordinates = triangleCoordinates;

            /******This section is about the spanning tree and spanning tree results******/
            //Spanning tree calculation
            let graph = createGraph(triangleCoordinates);
            let mstree = mst(graph);
            //Assigning the output values
            outputValue("graph", graph);
            outputValue("mst", mstree);

            /******This section is about the convex hull tree and convex hull results******/
            //Calculating the hull (convex hull)
            let hull = delaunay.hull;
            let hulldata = [];
            let e = hull;
            do {
                hulldata.push([e.x, e.y]);
                e = e.next;
            } while (e != hull);
            //Assigning the output values
            outputValue("convexHull", hulldata);

            /******This section is about the concave hull tree and concave hull results******/
                //TODO: Need to change the fixed value as 100 here by an algorithm to calculate it
            let concaveHullResult = new ConcaveHull(100).concaveHull(triangleCoordinates);
            outputValue("concaveHull", concaveHullResult);

            /******This section is about the outlying score tree and outlying score results******/
            let outlying = new Outlying(mstree);
            let outlyingScore = outlying.score();
            let outlyingLinks = outlying.links();
            outlying.removeOutlying();
            outputValue("outlyingScore", outlyingScore);
            outputValue("outlyingLinks", outlyingLinks);


            return window.scagnostics;
            function outputValue(name, value){
                window.scagnostics[name] = value;
            }
        };

    })(window);

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
